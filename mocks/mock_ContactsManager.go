// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces/ContactsManager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/jon-whit/go-contacts/models"
	reflect "reflect"
)

// MockContactsManager is a mock of ContactsManager interface
type MockContactsManager struct {
	ctrl     *gomock.Controller
	recorder *MockContactsManagerMockRecorder
}

// MockContactsManagerMockRecorder is the mock recorder for MockContactsManager
type MockContactsManagerMockRecorder struct {
	mock *MockContactsManager
}

// NewMockContactsManager creates a new mock instance
func NewMockContactsManager(ctrl *gomock.Controller) *MockContactsManager {
	mock := &MockContactsManager{ctrl: ctrl}
	mock.recorder = &MockContactsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContactsManager) EXPECT() *MockContactsManagerMockRecorder {
	return m.recorder
}

// ListUserContacts mocks base method
func (m *MockContactsManager) ListUserContacts(userID string) ([]models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserContacts", userID)
	ret0, _ := ret[0].([]models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserContacts indicates an expected call of ListUserContacts
func (mr *MockContactsManagerMockRecorder) ListUserContacts(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserContacts", reflect.TypeOf((*MockContactsManager)(nil).ListUserContacts), userID)
}

// CreateContact mocks base method
func (m *MockContactsManager) CreateContact(userID string, contact models.Contact) (models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", userID, contact)
	ret0, _ := ret[0].(models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact
func (mr *MockContactsManagerMockRecorder) CreateContact(userID, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockContactsManager)(nil).CreateContact), userID, contact)
}
